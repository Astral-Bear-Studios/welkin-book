= Syntax =

This section introduces the Welkin grammar.

* First, we introduce regular expressions in a self-contained way. This ensures no amgiguities arise in the rest of this document.
** Regular expressions are defined using nodes. In particular, **any combinations of symbols needed for this document are explicity defined**.
* Next, we define terminals and context free grammars.
* Finally, we present the grammars for Welkin texts and encodings solely with regular expressions, ensuring that these grammars are completely specified.

== Regular Expressions ==

We leave five symbols undefined. Each symbol is written in typewriter font.

* There are two symbols called **bits**: `0` and `1`.
* There are two symbols called **variables**: `b` and `S`. 
** `b` is the **bit node**
** `S` is the **successor symbol**
* There is one symbol called the **derivation operator**: `->`

These symbols obey the following rules.
* (R0) `b -> 0` 
* (R1) `b -> 1`
* (RS) `Sb -> b` 

A **byte** is `bbbbbbbb`.

A **character in US-ASCII** is a byte starting with `0`:

`0bbbbbbb`

Each character **encodes** a unique symbol. Table ?.?
provides the US-ASCII encoding. Separate rows show that the
characters listed are bytes.

**Table 1.1**
|=symbol|=character                                      |
|  `\0` | `0.0.0.0.0.0.0.0`                              |
|       | `0.(0|1).(0|1).(0|1).(0|1).(0|1).(0|1).(0|1)`. |

== Terminals == 
* A **layout** character is
* A **string node** is delimited with either single quotes `'` or double quotes `"`.
  More precisely, these are the following regular expressions:
**  
** 
  We say `w` is the **contents** of the string.
* Escaped characters ():
** Every instance of \' in `w` is replaced by '.
** Every instance of \" in `w` is replaced by ".
** Every instance of \\ in `w` is replaced by \\.
* Identifiers are strings without white space.

== Grammar ==
* LL
** Unambiguous
* Welkin Grammar:

