= Syntax =

This section introduces the Welkin grammar. In order
to avoid ambiguities in this document, we first
introduce regular expressions. We then write down
the grammars for Welkin texts and encodings
solely with regular expressions,
ensuring that these grammars are
completely specified. We work directly with the bootstrap
to avoid ambiguities.

== Regular Expressions ==

We leave several notions undefined. These notions
must follow the rules described in this document.

* There are two symbols called **bits**: `0` and `1`.
* There is an operation called **concatenation**, denoted by `.`.

We introduce two symbols: `0` and `1`. 

A **bit** is either a `0` or a `1`.

A **word** is recursively defined.

* Basis (5):
** `0` is a word.
** `1` is a word.
* Recursion (6): let `w` be a word.
** `w.0` (written w0) is a word.
** `w.1` (written w1) is a word.

== Terminals ==
* Table of US-ASCII:

* A **layout** character is

== Atoms ==
* Strings are words delimited with either single quotes `'` or double quotes `"`.
  More precisely, if $w$ is a word without quotes, then:
** 'w' is a string.
** "w" is a stirng.
  $w$ is the *contents* of the string.
* Escaped characters ():
** Every instance of \' in $w$ is replaced by '.
** Every instance of \" in $w$ is replaced by ".
** Every instance of \\ in $w$ is replaced by \\.
* Identifiers are strings without white space.

=== Grammar
* LL
** Unambiguous
* Welkin Grammar:

