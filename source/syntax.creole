= Syntax =

This section introduces the Welkin grammar.

* First, we introduce regular expressions in a self-contained way. This ensures no ambiguities arise in the rest of this document.
** Regular expressions are defined using nodes. In particular, **any combinations of symbols needed for this document are explicity defined**.
* Next, we define terminals and present our conventions on grammars.
* Finally, we present the grammars for Welkin texts and encodings solely with regular expressions, ensuring that these grammars are completely specified.

All symbols within this theory are written in typewriter font.

== Derivation ==

We introduce three symbols:
* Two **variables**: `A` and `S`.
** `R` is the **rule symbol**.
** `S` is the **start symbol**.
* The **derivation operator** `->`.

Derivation is recursively defined by two rules:

* (DB) Replace `S` with `R`.
* (DI) Replace `S` With `R -> S`.

== Bits ==

Along with derivation, we introduce five symbols.

* There are two symbols called **bits**: `0` and `1`.
* There are two symbols called **variables**: `b` and `b+`.
** `b` is a **bit**.
** `b+` is a **bit node**.

We concatenate symbols together arbitrarily. For the
purposes of this Standard, we fix the amount of
concatenation into a finite space, precisely bounded
by the size of this document.

Regular expressions for bits have the following four rules:
* (B0) `b -> 0`
* (B1) `b -> 1`
* (B+A) `A -> b+`
* (B+B) `b+ -> b`
* (B+I) `b+ -> bb+`

== Character Encodings ==
A **byte** consists of eight bits: `bbbbbbbb`. A **character in US-ASCII** is a byte starting with `0`: `0bbbbbbb`. Table 1.? displays these definitions for reference.

|=Name              |=Definition |
| Byte              | `bbbbbbbb` |
| US-ASCII Character| `0bbbbbbb` |

A (character) **encoding** `E` is a sequence of bytes separated by a new character `c`: `(b+c)+`. In other words, encodings
are defined by two rules:
* (E+B) `(b+c)+ -> b+c`
* (E+I) `(b+c)+ -> b+c(b+c)+`

Notationally, we represent each character using a unique symbol called a **glyph**.

For US-ASCII, the encoding is displayed in Table ?.?. Characters up to `00011111`, as well as `01111111`,
were historically used as control characters. For the purpose of this Standard, we exclude them. However,
any extensions of US-ASCII can be accepted; see Section ?.?.

|=Glyph|=Character|=Glyph|=Character|=Glyph|=Character|
|      |          |      |          |      |          |

In this Standard, we write any sequence of US-ASCII characters in double quotes. Every ASCII character is manually converted in Section `Bootstrap` as necessary.

== Terminals == 
Tables 2.?-2.? include key character classes.


 
* A **layout** character is US-ASCII whitespace: [
* A **digit** is `(0|1|2|3|4|5|6|7|8|9)`.
* Letters consist of
** Upper case: `(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)`
** Lower case: `(A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)`
* We use both single and double quotes. For convience, we introduce notation for non-quote characters.
** The class of all characters excluding single quotes: 
** The class of all characters excluding double quotes: 
* A **string node** is an expression delimited by single and double quotes, with potential escape characters. More precisely, this is one of the following:
** `('')` 
** 
  We say `w` is the **contents** of the string.

== Grammar ==

This section provides an informal overview of the Welkin grammar.
Although each term in our EBNF is carefully defined, EBNF
is a separate, independent language that, if not done carefully,
may introduce ambiguities. To avoid any possible confusion,
the full grammar and its notation is embedded into the Bootstrap.

We use the following notation.
* Productions include lower-case characters and can
end with "?".
* Spacing:
** Two nonterminals separated by a space can have any number of whitespace characters.
** Two nonterminals combined with "." have no characters inbetween them.


The Welkin grammar is given in Table ?.?.

{{{
    start: term "," start end | empty
    term: graph chain
    chain: link graph? link | empty
    link: ""<-" | "->" | "-"
    graph?: graph | empty
    graph: name contents? | contents
    name?: name | empty
    name: import.unit.path
    contents?: contents | empty
    contents: "{" term "}"
    import: ".".dots | empty
    dots: ".".dots | empty
    path: ".".unit.path
    unit: string | identifier
    string: STRING
    identifier: IDENTIFIER
    end: "," | empty
}}}

For the encoding, see the regular expression in Section 3.?.

=== Unambiguity ===

This section informally demonstrates that the Welkin grammar is unambiguous. For proofs of all claims made here, 
see Section `Bootstrap`. We present an informal proof here.

Following (), we calculate the first and follow sets for the grammar.
As there are no first and follow set collisions, this grammar is LL(1), 
and hence is unambiguous. (The regular expressions used in unit can be expressed in LL(1) grammars, and can thus be concatenated with the rest of the grammar.)
