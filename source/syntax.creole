= Syntax =
This section introduces the Welkin grammar.

* First, we present character encodings to extend ASCII from Section Basis.
* Next, we define terminals and present our conventions on grammars.
* Finally, we present the grammars for Welkin texts and encodings solely with regular expressions, ensuring that these grammars are completely specified.


== Terminals == 
* Strings use either single or double quotes. We separate both definitions for clarity.
* Tokens: 

== Character Encodings ==

In order to support character encodings broadly, we define the following.

**Definition.** Let `c` be a new symbol. A (character) **encoding** `E` is a sequence of bytes separated by `c`: `(b+c)+`. In other words, encodings
are defined by two rules:
* (E+B) `(b+.c)+ -> b+.c`
* (E+I) `(b+.c).(b+.c)+`

**Definition. (Interpretation into US-ASCII)**

== Grammar ==

To introduce the grammar, we first provide
a simplified subset. All Welkin files can be
written equivalently as this subset. We then introduce 
that the final version and prove it is unambiguous.

=== Simplified Syntax ===

Figure 3.? presents the full regular expression. Informally, a Welkin text consists of:
* Paths, a list containing units (string or number) separated by `.`.
* Connections between paths.
* Brackets that can contain paths and/or connections.

Figure 3.?
``

=== Full Syntax ===

We use the following notation.
* Productions include lowercase characters and can
end with "?".
* Spacing:
** Two nonterminals separated by a space can have any number of whitespace characters.
** Two nonterminals combined with "." have no characters inbetween them.


The Welkin grammar is given in Table ?.?.

{{{
    start: term "," start end | empty
    term: graph chain
    chain: link graph? link | empty
    link: ""<-" | "->" | "-"
    graph?: graph | empty
    graph: name contents? | contents
    name?: name | empty
    name: import.unit.path
    contents?: contents | empty
    contents: "{" term "}"
    import: ".".dots | empty
    dots: ".".dots | empty
    path: ".".unit.path
    unit: string | identifier
    string: STRING
    identifier: IDENTIFIER
    end: "," | empty
}}}

For the encoding, see the regular expression in Section 3.?.

=== Unambiguity ===

This section informally demonstrates that the Welkin grammar is unambiguous. For proofs of all claims made here, 
see Section `Bootstrap`. We present an informal proof here.

Following (), we calculate the first and follow sets for the grammar.
As there are no first and follow set collisions, this grammar is LL(1), 
and hence is unambiguous. (The regular expressions used in unit can be expressed in LL(1) grammars, and can thus be concatenated with the rest of the grammar.)
