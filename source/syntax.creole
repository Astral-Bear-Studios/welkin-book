= Syntax =

This section introduces the Welkin grammar. In order
to avoid ambiguities in this document, we first
introduce regular expressions. We then write down
the grammars for Welkin texts and encodings
solely with regular expressions,
ensuring that these grammars are
completely specified.

We define words and proofs via nodes.
Proofs are defined in smaller definitions
and combined together.

== Regular Expressions ==

We leave four symbols undefined. For clarity, we put each symbol in quotes.

* There are two symbols called **bits**: `0` and `1`.
* There are two symbols called **variables**: `b` and `S`. 
** `b` stands for bit
** `S` is the **start symbol**

These symbols must obey the following rules:
* Symbols can be combined.
* (FIX) Symbols can be substitued as follows:
** `b` can be substituted with either `0` or `1`
** `Sb` can be substituted by `b`
* (FIX) `S` is always the first node.

A **byte** is `bbbbbbbb`.

A **character in US-ASCII** is a byte starting with `0`:

`0bbbbbbb`

Each character **encodes** a unique symbol. Table ?.?
provides the US-ASCII encoding. Separate rows show that the
characters listed are bytes.

|=symbol|=character                                      |
|  `\0` | `0.0.0.0.0.0.0.0`                              |
|       | `0.(0|1).(0|1).(0|1).(0|1).(0|1).(0|1).(0|1)`. |

== Terminals == 
* A **layout** character is

== Atoms ==
* A **string node** is delimited with either single quotes `'` or double quotes `"`.
  More precisely, these are the following regular expressions:
**  
** 
  We say `w` is the **contents** of the string.
* Escaped characters ():
** Every instance of \' in `w` is replaced by '.
** Every instance of \" in `w` is replaced by ".
** Every instance of \\ in `w` is replaced by \\.
* Identifiers are strings without white space.

== Grammar ==
* LL
** Unambiguous
* Welkin Grammar:

