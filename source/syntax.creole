= Syntax =

This section introduces the Welkin grammar.

* First, we introduce regular expressions in a self-contained way. This ensures no amgiguities arise in the rest of this document.
** Regular expressions are defined using nodes. In particular, **any combinations of symbols needed for this document are explicity defined**.
* Next, we define terminals and LR grammars.
* Finally, we present the grammars for Welkin texts and encodings solely with regular expressions, ensuring that these grammars are completely specified.

== Regular Expressions ==

We leave five symbols undefined. Each symbol is written in typewriter font.

* There are two symbols called **bits**: `0` and `1`.
* There are three symbols called **variables**: `b`, `b*`, and `S`. 
** `b` is a **bit**
** `b*` is the **bit node**
** `S` is the **successor symbol**
* There is one symbol called the **derivation operator**: `->`

These symbols obey the following rules.
* (R0) `b -> 0` 
* (R1) `b -> 1`
* (RS) `Sb -> b` 

A **byte** is `bbbbbbbb`.

A **character in US-ASCII** is a byte starting with `0`: `0bbbbbbb`.

Each character **encodes** (assigns to a) unique symbol. Table ?.?
provides the US-ASCII encoding.

|=symbol|=character  |=symbol|=character  |
|  `\0` | `00000000` |  ``   | `00010000` |
|  `\a` | `00000111` |
|  `\b` | `00001000` |
|  `\t` | `00001001` |
|  `\n` | `00001010` |
|  `\v` | `00001011` |
|  `\f` | `00001100` |
|  `\r` | `00001101` |

== Terminals == 
* A **layout** character is ASCII whitespace: [

== Atoms ==
* A **string node** is delimited with either single quotes `'` or double quotes `"`.
  More precisely, these are the following regular expressions:
**  
** 
  We say `w` is the **contents** of the string.
* A string is either 's' or "s"
* Identifiers are strings without layout:

== Grammar ==
----
start: term "," start end | empty
term: graph chain
chain: link graph? link
    | empty.
link: "->" | "<-" | "-"
graph?: graph | empty
graph: name contents? | contents
name?: name | empty
name: dots unit.path
path: ".".unit.path
unit: string | identifier
string: 
identifier: C
end: "," | empty
----
