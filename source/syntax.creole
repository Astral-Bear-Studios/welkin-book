= Syntax =

This section introduces the Welkin grammar.

* First, we introduce regular expressions in a self-contained way. This ensures no amgiguities arise in the rest of this document.
** Regular expressions are defined using nodes. In particular, **any combinations of symbols needed for this document are explicity defined**.
* Next, we define terminals and LR grammars.
* Finally, we present the grammars for Welkin texts and encodings solely with regular expressions, ensuring that these grammars are completely specified.

== Regular Expressions ==

We leave five symbols undefined. Each symbol is written in typewriter font.

* There are two symbols called **bits**: `0` and `1`.
* There are three symbols called **variables**: `b`, `b*`, and `S`. 
** `b` is a **bit**
** `b*` is the **bit node**
** `S` is the **successor symbol**
* There is one symbol called the **derivation operator**: `->`

These symbols obey the following rules.
* (R0) `b -> 0` 
* (R1) `b -> 1`
* (RS) `Sb -> b` 

A **byte** is `bbbbbbbb`.

== Encodings ==

A **character in US-ASCII** is a byte starting with `0`:

`0bbbbbbb`.

An **encoding** `E` is a sequence of bytes separated by a new character `c`:

`(b+ c)+`.

For US-ASCII, the encoding is displayed in Table ?.?. Characters up to `00011111`, as well as `01111111`,
were historically used as control characters. For the purpose of this Standard, we exclude them. However,
any extensions of US-ASCII can be accepted; see Section ?.?.

|=symbol|=character  |=symbol|=character  |=symbol|=character  |
|       |            |       |            |       |            |

We write any US-ASCII character in double quotes.

== Terminals == 
* A **layout** character is US-ASCII whitespace: [
* A **digit** is (0|1|2|3|4|5|6|7|8|9).
* Letters consist of:
** Upper case:
** Lower case:

== Atoms ==
* A **string node** is delimited with either single quotes `'` or double quotes `"`.
  More precisely, these are the following regular expressions:
**  
** 
  We say `w` is the **contents** of the string.
* Identifiers are strings without layout:

== Grammar ==
=======
* Identifiers are words without layout characters. 

== Grammar ==

This section provides an informal overview of the Welkin grammar.
Although each term in our EBNF is carefully defined, EBNF
is a separate, intricate language. To avoid any possible confusion,
this grammar is embedded into the Bootstrap.

We use the following notation:
* Productions include lower-case characters and can
end with "?".
* Spacing:
** Two nonterminals separated by a space can have any number of whitespace characters.
** Two nonterminals combined with "." have no characters inbetween them.


The Welkin grammar is given in Table ?.?.

{{{
    start: term "," start end | empty
    term: graph chain
    chain: "-" graph? "->"
        | "<-" graph? "-"
        | "-" graph? "-"
        | empty
    graph?: graph | empty
    graph: name contents? | contents
    name?: name | empty
    name: import.unit.path
    import: ".".dots
    dots: "." dots | empty
    path: ".".unit.path
    unit: string | identifier
    string: STRING
    identifier: IDENT 
    end: "," | empty
}}}

=== Unambiguity ===

This section informally demonstrates that the Welkin grammar is unambiguous.
We rely on external results that are beyond the scope of this Standard.
For epistemological concerns, see Section `Bootstrap`.

Following (), we calculate the first and follow sets for the grammar.
As there are no first and follow set collisions, this grammar is LL(1), 
and hence is unambiguous. (The regular expressions used in unit can be expressed in LL(1) grammars, and hence, concatenated with the rest of the grammar.)
