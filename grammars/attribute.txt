//SPDX-FileCopyrightText: 2023 Oscar Bender-Stone <oscarbenderstone@gmail.com>
//SPDX-License-Identifier: CC-BY-4.0

#import base.txt
#override base.term

term = "@".directive | connections | construct ","? | member ("," | _)
directive = attribute
attribute = "import".tuple -> import
            | "self" -> self
            | "alias".graph[empty] -> alias
            | "parse".tuple[] -> parse
            | "input".graph -> output
            | "validate".graph[unit] -> validate // TODO: add very simple conditions in validate.
            | "record".graph[unit] -> record // TODO: come up with better names for record and output
            | "output".graph -> output
            | "attribute".graph[empty, term] -> new_attribute
            | unit.term -> custom_attribute
construct ::= operation | tuple | list | series | all_terms | graph
operation ::= term.tuple | term unit term
list ::= "[" term "," (term ",")* ","? "]"
tuple ::= "(" term "," (term ",")* ","? ")"
series ::= term "," (term ",")
all_terms ::= "*"
import base.txt

// Included in base.txt (for reference)
// term        = connections | graph ","? | member ("," | _ )
// connections = vertex (connector vertex)+
// connector   = "-" vertex? "-" -> edge
//             | "-" vertex? "->" -> left_arrow
//             | "<-" vertex? "-" -> right_arrow
// vertex      = graph | member _
// graph       = (member | "_".) "{" term "}"
// member      = "."+ (ident | string | "#" number) element*
//             | unit element*
// element     = "." (ident | string) | "#" number
// unit        = ident | string | num
// ident       = CHAR*
// string      = STRING
// number      = NUMBER
